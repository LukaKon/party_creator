openapi: 3.0.3
info:
  title: Party creator service
  version: 1.0.0
  description: Service that help to arange every kind of event
paths:
  /account/getprofile/:
    get:
      operationId: account_getprofile_retrieve
      tags:
      - account
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    post:
      operationId: account_getprofile_create
      tags:
      - account
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
  /account/login/:
    post:
      operationId: account_login_create
      description: Create a new auth token for user.
      tags:
      - account
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MyTokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/MyTokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MyTokenObtainPair'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MyTokenObtainPair'
          description: ''
  /account/login/refresh/:
    post:
      operationId: account_login_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - account
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /account/logout/:
    post:
      operationId: account_logout_create
      tags:
      - account
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /account/password_reset/:
    post:
      operationId: account_password_reset_create
      description: |-
        An Api View which provides a method to request a password reset token based on an e-mail address

        Sends a signal reset_password_token_created when a reset token was created
      tags:
      - account
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Email'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Email'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Email'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Email'
          description: ''
  /account/password_reset/confirm/:
    post:
      operationId: account_password_reset_confirm_create
      description: An Api View which provides a method to reset a password based on
        a unique token
      tags:
      - account
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordToken'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordToken'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordToken'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordToken'
          description: ''
  /account/password_reset/validate_token/:
    post:
      operationId: account_password_reset_validate_token_create
      description: An Api View which provides a method to verify that a token is valid
      tags:
      - account
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetToken'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ResetToken'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ResetToken'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResetToken'
          description: ''
  /account/register/:
    post:
      operationId: account_register_create
      description: Create a new user in the system.
      tags:
      - account
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Register'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Register'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Register'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Register'
          description: ''
  /account/testapi/:
    get:
      operationId: account_testapi_retrieve
      tags:
      - account
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /account/updateprofile/:
    put:
      operationId: account_updateprofile_update
      tags:
      - account
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    patch:
      operationId: account_updateprofile_partial_update
      tags:
      - account
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUser'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
  /api/announcements/:
    get:
      operationId: api_announcements_list
      description: View for manage announcement APIs.
      parameters:
      - in: query
        name: amount
        schema:
          type: integer
        description: Amount of announcements
      - in: query
        name: category
        schema:
          type: string
        description: Comma separated list of categories uuid to filter
      tags:
      - api
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Announcement'
          description: ''
    post:
      operationId: api_announcements_create
      description: View for manage announcement APIs.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnnouncementDetail'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AnnouncementDetail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AnnouncementDetail'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnnouncementDetail'
          description: ''
  /api/announcements/{slug}/:
    get:
      operationId: api_announcements_retrieve
      description: View for manage announcement APIs.
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnnouncementDetail'
          description: ''
    put:
      operationId: api_announcements_update
      description: View for manage announcement APIs.
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnnouncementDetail'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AnnouncementDetail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AnnouncementDetail'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnnouncementDetail'
          description: ''
    patch:
      operationId: api_announcements_partial_update
      description: View for manage announcement APIs.
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedAnnouncementDetail'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedAnnouncementDetail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedAnnouncementDetail'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnnouncementDetail'
          description: ''
    delete:
      operationId: api_announcements_destroy
      description: View for manage announcement APIs.
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        required: true
      tags:
      - api
      responses:
        '204':
          description: No response body
  /api/categories/:
    get:
      operationId: api_categories_list
      description: View to manage category APIs.
      tags:
      - api
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
          description: ''
  /api/categories/{uuid}/:
    get:
      operationId: api_categories_retrieve
      description: View to manage category APIs.
      parameters:
      - in: path
        name: uuid
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
          description: ''
  /api/images/:
    get:
      operationId: api_images_list
      description: View to manage image APIs.
      tags:
      - api
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Image'
          description: ''
    post:
      operationId: api_images_create
      description: View to manage image APIs.
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Image'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Image'
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Image'
          description: ''
  /api/images/{id}/:
    get:
      operationId: api_images_retrieve
      description: View to manage image APIs.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this image.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Image'
          description: ''
    put:
      operationId: api_images_update
      description: View to manage image APIs.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this image.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Image'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Image'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Image'
          description: ''
    patch:
      operationId: api_images_partial_update
      description: View to manage image APIs.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this image.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedImage'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedImage'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Image'
          description: ''
    delete:
      operationId: api_images_destroy
      description: View to manage image APIs.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this image.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/images/{id}/upload-image/:
    post:
      operationId: api_images_upload_image_create
      description: Upload an image to recipe.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this image.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Image'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Image'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Image'
          description: ''
components:
  schemas:
    Announcement:
      type: object
      description: Announcement serializer.
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 200
        user:
          allOf:
          - $ref: '#/components/schemas/Nested'
          readOnly: true
        category:
          type: array
          items:
            $ref: '#/components/schemas/Nested'
          readOnly: true
        images:
          type: array
          items:
            $ref: '#/components/schemas/Image'
        created:
          type: string
          format: date-time
          readOnly: true
        slug:
          type: string
          readOnly: true
          pattern: ^[-a-zA-Z0-9_]+$
        uuid:
          type: string
          format: uuid
          readOnly: true
      required:
      - category
      - created
      - id
      - slug
      - title
      - user
      - uuid
    AnnouncementDetail:
      type: object
      description: Serializer for announcement detail view.
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 200
        user:
          allOf:
          - $ref: '#/components/schemas/Nested'
          readOnly: true
        category:
          type: array
          items:
            $ref: '#/components/schemas/Nested'
          readOnly: true
        images:
          type: array
          items:
            $ref: '#/components/schemas/Image'
        created:
          type: string
          format: date-time
          readOnly: true
        slug:
          type: string
          readOnly: true
          pattern: ^[-a-zA-Z0-9_]+$
        uuid:
          type: string
          format: uuid
          readOnly: true
        description:
          type: string
      required:
      - category
      - created
      - description
      - id
      - slug
      - title
      - user
      - uuid
    Category:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          $ref: '#/components/schemas/NameEnum'
        uuid:
          type: string
          format: uuid
          readOnly: true
      required:
      - id
      - name
      - uuid
    Email:
      type: object
      properties:
        email:
          type: string
          format: email
      required:
      - email
    Image:
      type: object
      description: Image serializer.
      properties:
        id:
          type: integer
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
        announcement:
          type: integer
          nullable: true
          title: Announcement_%(class)ss
        image:
          type: string
          format: uri
          nullable: true
          title: Images
        is_main:
          type: boolean
          nullable: true
      required:
      - id
      - uuid
    MyTokenObtainPair:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
          writeOnly: true
      required:
      - email
      - password
    NameEnum:
      enum:
      - muzyka
      - cattering
      - fotograf
      - lokal
      - animator
      type: string
    Nested:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        password:
          type: string
          title: Hasło
          maxLength: 128
        last_login:
          type: string
          format: date-time
          nullable: true
          title: Ostatnie logowanie
        is_superuser:
          type: boolean
          title: Status superużytkownika
          description: Oznacza, że ten użytkownik ma wszystkie uprawnienia bez ich
            jawnego przypisywania.
        first_name:
          type: string
          title: Imię
          maxLength: 150
        last_name:
          type: string
          title: Nazwisko
          maxLength: 150
        is_staff:
          type: boolean
          title: W zespole
          description: Określa czy użytkownik może zalogować się do panelu administracyjnego.
        is_active:
          type: boolean
          title: Aktywny
          description: Określa czy użytkownika należy uważać za aktywnego. Odznacz
            zamiast usuwać konto.
        date_joined:
          type: string
          format: date-time
          title: Data dołączenia
        email:
          type: string
          format: email
          title: Adres e-mail
          maxLength: 254
        is_moderator:
          type: boolean
        is_firma:
          type: boolean
        image:
          type: string
          format: uri
          nullable: true
        groups:
          type: array
          items:
            type: integer
            title: Grupy
          title: Grupy
          description: Grupy do których należy użytkownik. Użytkownik otrzyma wszystkie
            uprawnienia przypisane do każdej z jego grup.
        user_permissions:
          type: array
          items:
            type: integer
            title: Uprawnienia użytkownika
          title: Uprawnienia użytkownika
          description: Szczególne uprawnienia dla tego użytkownika.
      required:
      - email
      - id
      - password
    PasswordToken:
      type: object
      properties:
        password:
          type: string
          title: Hasło
        token:
          type: string
      required:
      - password
      - token
    PatchedAnnouncementDetail:
      type: object
      description: Serializer for announcement detail view.
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 200
        user:
          allOf:
          - $ref: '#/components/schemas/Nested'
          readOnly: true
        category:
          type: array
          items:
            $ref: '#/components/schemas/Nested'
          readOnly: true
        images:
          type: array
          items:
            $ref: '#/components/schemas/Image'
        created:
          type: string
          format: date-time
          readOnly: true
        slug:
          type: string
          readOnly: true
          pattern: ^[-a-zA-Z0-9_]+$
        uuid:
          type: string
          format: uuid
          readOnly: true
        description:
          type: string
    PatchedImage:
      type: object
      description: Image serializer.
      properties:
        id:
          type: integer
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
        announcement:
          type: integer
          nullable: true
          title: Announcement_%(class)ss
        image:
          type: string
          format: uri
          nullable: true
          title: Images
        is_main:
          type: boolean
          nullable: true
    PatchedUser:
      type: object
      description: Serializer for the user object.
      properties:
        email:
          type: string
          format: email
          title: Adres e-mail
          maxLength: 254
        is_firma:
          type: boolean
        announcements:
          type: array
          items:
            $ref: '#/components/schemas/Announcement'
        image:
          type: string
          format: uri
          nullable: true
    Register:
      type: object
      description: Serializer for user registration.
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          writeOnly: true
        password2:
          type: string
          writeOnly: true
      required:
      - email
      - password
      - password2
    ResetToken:
      type: object
      properties:
        token:
          type: string
      required:
      - token
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
      required:
      - access
      - refresh
    User:
      type: object
      description: Serializer for the user object.
      properties:
        email:
          type: string
          format: email
          title: Adres e-mail
          maxLength: 254
        is_firma:
          type: boolean
        announcements:
          type: array
          items:
            $ref: '#/components/schemas/Announcement'
        image:
          type: string
          format: uri
          nullable: true
      required:
      - announcements
      - email
  securitySchemes:
    jwtAuth:
      type: apiKey
      in: header
      name: Authorization
      description: Token-based authentication with required prefix "JWT"
