openapi: 3.0.3
info:
  title: Party creator service
  version: 1.0.0
  description: Service that help to arange every kind of event
paths:
  /account/getuser/:
    get:
      operationId: account_getuser_retrieve
      description: |-
        Apply this mixin to any view or viewset to get multiple field filtering
        based on a `lookup_fields` attribute, instead of the default single field filtering.
      tags:
      - account
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
  /account/login/:
    post:
      operationId: account_login_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - account
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MyTokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/MyTokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MyTokenObtainPair'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MyTokenObtainPair'
          description: ''
  /account/login/refresh/:
    post:
      operationId: account_login_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - account
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /account/logout/:
    post:
      operationId: account_logout_create
      tags:
      - account
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /account/register/:
    post:
      operationId: account_register_create
      tags:
      - account
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Register'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Register'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Register'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Register'
          description: ''
  /account/testapi/:
    get:
      operationId: account_testapi_retrieve
      tags:
      - account
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/addannouncement/:
    post:
      operationId: api_addannouncement_create
      description: add announcement
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Announcement'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Announcement'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Announcement'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Announcement'
          description: ''
  /api/announcement/{uuid}/:
    get:
      operationId: api_announcement_retrieve
      parameters:
      - in: path
        name: uuid
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Announcement'
          description: ''
    put:
      operationId: api_announcement_update
      parameters:
      - in: path
        name: uuid
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Announcement'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Announcement'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Announcement'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Announcement'
          description: ''
    patch:
      operationId: api_announcement_partial_update
      parameters:
      - in: path
        name: uuid
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedAnnouncement'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedAnnouncement'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedAnnouncement'
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Announcement'
          description: ''
    delete:
      operationId: api_announcement_destroy
      parameters:
      - in: path
        name: uuid
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/announcements/:
    get:
      operationId: api_announcements_list
      tags:
      - api
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Announcement'
          description: ''
  /api/categories/:
    get:
      operationId: api_categories_list
      tags:
      - api
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
          description: ''
components:
  schemas:
    Announcement:
      type: object
      properties:
        title:
          type: string
          maxLength: 200
        description:
          type: string
        user:
          type: integer
        category:
          $ref: '#/components/schemas/Category'
        created:
          type: string
          format: date-time
          readOnly: true
        slug:
          type: string
          readOnly: true
          pattern: ^[-a-zA-Z0-9_]+$
        uuid:
          type: string
          format: uuid
          readOnly: true
      required:
      - category
      - created
      - description
      - slug
      - title
      - user
      - uuid
    Category:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          $ref: '#/components/schemas/NameEnum'
        uuid:
          type: string
          format: uuid
          readOnly: true
      required:
      - id
      - name
      - uuid
    MyTokenObtainPair:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
          writeOnly: true
      required:
      - email
      - password
    NameEnum:
      enum:
      - muzyka
      - cattering
      - fotograf
      - lokal
      - animator
      type: string
    PatchedAnnouncement:
      type: object
      properties:
        title:
          type: string
          maxLength: 200
        description:
          type: string
        user:
          type: integer
        category:
          $ref: '#/components/schemas/Category'
        created:
          type: string
          format: date-time
          readOnly: true
        slug:
          type: string
          readOnly: true
          pattern: ^[-a-zA-Z0-9_]+$
        uuid:
          type: string
          format: uuid
          readOnly: true
    Register:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          writeOnly: true
        password2:
          type: string
          writeOnly: true
      required:
      - email
      - password
      - password2
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
      required:
      - access
      - refresh
    User:
      type: object
      properties:
        email:
          type: string
          format: email
          title: Adres e-mail
          maxLength: 254
      required:
      - email
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
